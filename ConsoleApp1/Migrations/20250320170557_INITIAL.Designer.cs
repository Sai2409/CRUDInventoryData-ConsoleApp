// <auto-generated />
using System;
using ECommerceInventory.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceInventory.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250320170557_INITIAL")]
    partial class INITIAL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerceInventory.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerceInventory.Models.ProductStockAvailability", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("ProductStockAvailabilities");
                });

            modelBuilder.Entity("ECommerceInventory.Models.ProductStockAvailability", b =>
                {
                    b.HasOne("ECommerceInventory.Models.Product", "Product")
                        .WithOne("StockAvailability")
                        .HasForeignKey("ECommerceInventory.Models.ProductStockAvailability", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceInventory.Models.Product", b =>
                {
                    b.Navigation("StockAvailability")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
